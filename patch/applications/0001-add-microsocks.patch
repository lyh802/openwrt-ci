From aec5f07b4b17fa5e6b0e4503238797887f5e2086 Mon Sep 17 00:00:00 2001
From: lyh802 <lyh802@126.com>
Date: Thu, 25 Nov 2021 07:56:49 +0000
Subject: [PATCH] add microsocks

---
 package/microsocks/Makefile              |  55 ++
 package/microsocks/README.md             |   8 +
 package/microsocks/files/microsocks.init |  15 +
 package/microsocks/src/.gitignore        |   3 +
 package/microsocks/src/COPYING           |  24 +
 package/microsocks/src/Makefile          |  34 ++
 package/microsocks/src/README.md         |  54 ++
 package/microsocks/src/create-dist.sh    |  28 +
 package/microsocks/src/sblist.c          |  73 +++
 package/microsocks/src/sblist.h          |  92 ++++
 package/microsocks/src/sblist_delete.c   |   9 +
 package/microsocks/src/sblock.c          |  97 ++++
 package/microsocks/src/sblock.h          |  38 ++
 package/microsocks/src/sockssrv.c        | 649 +++++++++++++++++++++++
 14 files changed, 1179 insertions(+)
 create mode 100755 package/microsocks/Makefile
 create mode 100755 package/microsocks/README.md
 create mode 100755 package/microsocks/files/microsocks.init
 create mode 100755 package/microsocks/src/.gitignore
 create mode 100755 package/microsocks/src/COPYING
 create mode 100755 package/microsocks/src/Makefile
 create mode 100755 package/microsocks/src/README.md
 create mode 100755 package/microsocks/src/create-dist.sh
 create mode 100755 package/microsocks/src/sblist.c
 create mode 100755 package/microsocks/src/sblist.h
 create mode 100755 package/microsocks/src/sblist_delete.c
 create mode 100755 package/microsocks/src/sblock.c
 create mode 100755 package/microsocks/src/sblock.h
 create mode 100755 package/microsocks/src/sockssrv.c

diff --git a/package/microsocks/Makefile b/package/microsocks/Makefile
new file mode 100755
index 0000000000..61d67d31a0
--- /dev/null
+++ b/package/microsocks/Makefile
@@ -0,0 +1,55 @@
+#
+# Copyright (C) 2006-2014 OpenWrt.org
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=microsocks
+PKG_VERSION:=1.0.1
+PKG_RELEASE:=1
+
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/microsocks
+  SUBMENU:=Web Servers/Proxies
+  SECTION:=net
+  CATEGORY:=Network
+  TITLE:=Microsocks is a lightweight Socks proxy
+  MAINTAINER:=lyh802 forked from rofl0r
+  DEPENDS:=+libpthread
+endef
+
+define Build/Prepare
+	mkdir -p $(PKG_BUILD_DIR)
+	$(CP) ./src/* $(PKG_BUILD_DIR)/
+endef
+
+define Build/Configure
+endef
+
+define Build/Compile
+	$(MAKE) -C $(PKG_BUILD_DIR) \
+	ARCH="$(LINUX_KARCH)" \
+        CC="$(TARGET_CC)" \
+        CFLAGS="$(TARGET_CFLAGS) -Wall" \
+        LDFLAGS="$(TARGET_LDFLAGS)"
+endef
+
+define Package/microsocks/install
+	$(INSTALL_DIR) $(1)/usr/bin
+	$(INSTALL_BIN) $(PKG_BUILD_DIR)/microsocks $(1)/usr/bin/
+	$(INSTALL_DIR) $(1)/etc/init.d
+	$(INSTALL_BIN) ./files/microsocks.init $(1)/etc/init.d/microsocks
+endef
+
+define Package/microsocks/extra_provides
+	echo "libc.so.6"; \
+	echo "libpthread.so.0";
+endef
+
+$(eval $(call BuildPackage,microsocks))
diff --git a/package/microsocks/README.md b/package/microsocks/README.md
new file mode 100755
index 0000000000..edf79f728c
--- /dev/null
+++ b/package/microsocks/README.md
@@ -0,0 +1,8 @@
+# microsocks
+tiny, portable SOCKS5 server with very moderate resource usage
+
+1. 主要修复了IPV4/V6域名解析问题，优先获取与bind_addr类型一致的地址
+
+2. 重构了逻辑，复用部分缓冲区，优化内存占用
+
+3. 移植到OpenWrt 15.05.1 AR71XX平台，未完全测试，目前正常使用中
diff --git a/package/microsocks/files/microsocks.init b/package/microsocks/files/microsocks.init
new file mode 100755
index 0000000000..ff4a8d3036
--- /dev/null
+++ b/package/microsocks/files/microsocks.init
@@ -0,0 +1,15 @@
+#!/bin/sh /etc/rc.common
+# Copyright (C) 2008-2011 OpenWrt.org
+
+START=99
+USE_PROCD=1
+
+PROG=/usr/bin/microsocks
+
+start_service() {
+	procd_open_instance
+	procd_set_param command "$PROG"
+	procd_set_param stderr 1 # forward stderr of the command to logd
+	procd_set_param stdout 0
+	procd_close_instance
+}
diff --git a/package/microsocks/src/.gitignore b/package/microsocks/src/.gitignore
new file mode 100755
index 0000000000..c9c6b85dff
--- /dev/null
+++ b/package/microsocks/src/.gitignore
@@ -0,0 +1,3 @@
+*.o
+*.out
+
diff --git a/package/microsocks/src/COPYING b/package/microsocks/src/COPYING
new file mode 100755
index 0000000000..bfb6c9cefb
--- /dev/null
+++ b/package/microsocks/src/COPYING
@@ -0,0 +1,24 @@
+microSocks is licensed under the following standard MIT license:
+
+----------------------------------------------------------------------
+Copyright © 2017 rofl0r.
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------
diff --git a/package/microsocks/src/Makefile b/package/microsocks/src/Makefile
new file mode 100755
index 0000000000..a022d8001c
--- /dev/null
+++ b/package/microsocks/src/Makefile
@@ -0,0 +1,34 @@
+# if you want to change/override some variables, do so in a file called
+# config.mak, which is gets included automatically if it exists.
+
+prefix = /usr/local
+bindir = $(prefix)/bin
+
+PROG = microsocks
+SRCS =  sockssrv.c sblock.c sblist.c sblist_delete.c
+OBJS = $(SRCS:.c=.o)
+
+LIBS = -lpthread
+
+CFLAGS += -Wall -std=c99
+
+-include config.mak
+
+all: $(PROG)
+
+install: $(PROG)
+	install -d $(DESTDIR)/$(bindir)
+	install -D -m 755 $(PROG) $(DESTDIR)/$(bindir)/$(PROG)
+
+clean:
+	rm -f $(PROG)
+	rm -f $(OBJS)
+
+%.o: %.c
+	$(CC) $(CPPFLAGS) $(CFLAGS) $(INC) $(PIC) -c -o $@ $<
+
+$(PROG): $(OBJS)
+	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $@
+
+.PHONY: all clean install
+
diff --git a/package/microsocks/src/README.md b/package/microsocks/src/README.md
new file mode 100755
index 0000000000..e8c0af60bc
--- /dev/null
+++ b/package/microsocks/src/README.md
@@ -0,0 +1,54 @@
+MicroSocks - multithreaded, small, efficient SOCKS5 server.
+===========================================================
+
+a SOCKS5 service that you can run on your remote boxes to tunnel connections
+through them, if for some reason SSH doesn't cut it for you.
+
+It's very lightweight, and very light on resources too:
+
+for every client, a thread with a stack size of 8KB is spawned.
+the main process basically doesn't consume any resources at all.
+
+the only limits are the amount of file descriptors and the RAM.
+
+It's also designed to be robust: it handles resource exhaustion
+gracefully by simply denying new connections, instead of calling abort()
+as most other programs do these days.
+
+another plus is ease-of-use: no config file necessary, everything can be
+done from the command line and doesn't even need any parameters for quick
+setup.
+
+History
+-------
+
+This is the successor of "rocksocks5", and it was written with
+different goals in mind:
+
+- prefer usage of standard libc functions over homegrown ones
+- no artificial limits
+- do not aim for minimal binary size, but for minimal source code size,
+  and maximal readability, reusability, and extensibility.
+
+as a result of that, ipv4, dns, and ipv6 is supported out of the box
+and can use the same code, while rocksocks5 has several compile time
+defines to bring down the size of the resulting binary to extreme values
+like 10 KB static linked when only ipv4 support is enabled.
+
+still, if optimized for size, *this* program when static linked against musl
+libc is not even 50 KB. that's easily usable even on the cheapest routers.
+
+command line options
+------------------------
+
+    microsocks -1 -i listenip -p port -u user -P password -b bindaddr
+
+all arguments are optional.
+by default listenip is 0.0.0.0 and port 1080.
+
+option -1 activates auth_once mode: once a specific ip address
+authed successfully with user/pass, it is added to a whitelist
+and may use the proxy without auth.
+this is handy for programs like firefox that don't support
+user/pass auth. for it to work you'd basically make one connection
+with another program that supports it, and then you can use firefox too.
diff --git a/package/microsocks/src/create-dist.sh b/package/microsocks/src/create-dist.sh
new file mode 100755
index 0000000000..279774ddcf
--- /dev/null
+++ b/package/microsocks/src/create-dist.sh
@@ -0,0 +1,28 @@
+#!/bin/sh
+if [ -z "$VER" ] ; then
+	echo set VER!
+	exit
+fi
+me=`pwd`
+
+proj=microsocks
+projver=${proj}-${VER}
+
+tempdir=/tmp/${proj}-0000
+rm -rf "$tempdir"
+mkdir -p "$tempdir"
+
+cd $tempdir
+GITDIR=https://github.com/rofl0r/$proj
+GITDIR=$me
+git clone "$GITDIR" $projver
+
+rm -rf $projver/.git
+rm -rf $projver/docs
+rm -f $projver/.gitignore
+rm -f $projver/create-dist.sh
+
+tar cf $proj.tar $projver/
+xz -z -9 -e $proj.tar
+mv $proj.tar.xz $me/$projver.tar.xz
+rm -rf "$tempdir"
diff --git a/package/microsocks/src/sblist.c b/package/microsocks/src/sblist.c
new file mode 100755
index 0000000000..96bbebcac3
--- /dev/null
+++ b/package/microsocks/src/sblist.c
@@ -0,0 +1,73 @@
+#undef _POSIX_C_SOURCE
+#define _POSIX_C_SOURCE 200809L
+#include "sblist.h"
+#include <limits.h>
+#include <stdlib.h>
+#include <string.h>
+#define MY_PAGE_SIZE 4096
+
+sblist* sblist_new(size_t itemsize, size_t blockitems) {
+	sblist* ret = (sblist*) malloc(sizeof(sblist));
+	sblist_init(ret, itemsize, blockitems);
+	return ret;
+}
+
+static void sblist_clear(sblist* l) {
+	l->items = NULL;
+	l->capa = 0;
+	l->count = 0;
+}
+
+void sblist_init(sblist* l, size_t itemsize, size_t blockitems) {
+	if(l) {
+		l->blockitems = blockitems ? blockitems : MY_PAGE_SIZE / itemsize;
+		l->itemsize = itemsize;
+		sblist_clear(l);
+	}
+}
+
+void sblist_free_items(sblist* l) {
+	if(l) {
+		if(l->items) free(l->items);
+		sblist_clear(l);
+	}
+}
+
+void sblist_free(sblist* l) {
+	if(l) {
+		sblist_free_items(l);
+		free(l);
+	}
+}
+
+char* sblist_item_from_index(sblist* l, size_t idx) {
+	return l->items + (idx * l->itemsize);
+}
+
+void* sblist_get(sblist* l, size_t item) {
+	if(item < l->count) return (void*) sblist_item_from_index(l, item);
+	return NULL;
+}
+
+int sblist_set(sblist* l, void* item, size_t pos) {
+	if(pos >= l->count) return 0;
+	memcpy(sblist_item_from_index(l, pos), item, l->itemsize);
+	return 1;
+}
+
+int sblist_grow_if_needed(sblist* l) {
+	char* temp;
+	if(l->count == l->capa) {
+		temp = realloc(l->items, (l->capa + l->blockitems) * l->itemsize);
+		if(!temp) return 0;
+		l->capa += l->blockitems;
+		l->items = temp;
+	}
+	return 1;
+}
+
+int sblist_add(sblist* l, void* item) {
+	if(!sblist_grow_if_needed(l)) return 0;
+	l->count++;
+	return sblist_set(l, item, l->count - 1);
+}
diff --git a/package/microsocks/src/sblist.h b/package/microsocks/src/sblist.h
new file mode 100755
index 0000000000..f0d1846494
--- /dev/null
+++ b/package/microsocks/src/sblist.h
@@ -0,0 +1,92 @@
+#ifndef SBLIST_H
+#define SBLIST_H
+
+/* this file is part of libulz, as of commit 8ab361a27743aaf025323ee43b8b8876dc054fdd
+   modified for direct inclusion in microsocks. */
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stddef.h>
+/*
+ * simple buffer list.
+ * 
+ * this thing here is basically a generic dynamic array
+ * will realloc after every blockitems inserts
+ * can store items of any size.
+ * 
+ * so think of it as a by-value list, as opposed to a typical by-ref list.
+ * you typically use it by having some struct on the stack, and pass a pointer
+ * to sblist_add, which will copy the contents into its internal memory.
+ * 
+ */
+
+typedef struct {
+	size_t itemsize;
+	size_t blockitems;
+	size_t count;
+	size_t capa;
+	char* items;
+} sblist;
+
+#define sblist_getsize(X) ((X)->count)
+#define sblist_get_count(X) ((X)->count)
+#define sblist_empty(X) ((X)->count == 0)
+
+// for dynamic style
+sblist* sblist_new(size_t itemsize, size_t blockitems);
+void sblist_free(sblist* l);
+
+//for static style
+void sblist_init(sblist* l, size_t itemsize, size_t blockitems);
+void sblist_free_items(sblist* l);
+
+// accessors
+void* sblist_get(sblist* l, size_t item);
+// returns 1 on success, 0 on OOM
+int sblist_add(sblist* l, void* item);
+int sblist_set(sblist* l, void* item, size_t pos);
+void sblist_delete(sblist* l, size_t item);
+char* sblist_item_from_index(sblist* l, size_t idx);
+int sblist_grow_if_needed(sblist* l);
+int sblist_insert(sblist* l, void* item, size_t pos);
+/* same as sblist_add, but returns list index of new item, or -1 */
+size_t sblist_addi(sblist* l, void* item);
+void sblist_sort(sblist *l, int (*compar)(const void *, const void *));
+/* insert element into presorted list, returns listindex of new entry or -1*/
+size_t sblist_insert_sorted(sblist* l, void* o, int (*compar)(const void *, const void *));
+
+#ifndef __COUNTER__
+#define __COUNTER__ __LINE__
+#endif
+
+#define __sblist_concat_impl( x, y ) x##y
+#define __sblist_macro_concat( x, y ) __sblist_concat_impl( x, y )
+#define __sblist_iterator_name __sblist_macro_concat(sblist_iterator, __COUNTER__)
+
+// use with custom iterator variable
+#define sblist_iter_counter(LIST, ITER, PTR) \
+	for(size_t ITER = 0; (PTR = sblist_get(LIST, ITER)), ITER < sblist_getsize(LIST); ITER++)
+
+// use with custom iterator variable, which is predeclared
+#define sblist_iter_counter2(LIST, ITER, PTR) \
+	for(ITER = 0; (PTR = sblist_get(LIST, ITER)), ITER < sblist_getsize(LIST); ITER++)
+
+// use with custom iterator variable, which is predeclared and signed
+// useful for a loop which can delete items from the list, and then decrease the iterator var.
+#define sblist_iter_counter2s(LIST, ITER, PTR) \
+	for(ITER = 0; (PTR = sblist_get(LIST, ITER)), ITER < (ssize_t) sblist_getsize(LIST); ITER++)
+
+
+// uses "magic" iterator variable
+#define sblist_iter(LIST, PTR) sblist_iter_counter(LIST, __sblist_iterator_name, PTR)
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma RcB2 DEP "sblist.c" "sblist_delete.c"
+
+#endif
diff --git a/package/microsocks/src/sblist_delete.c b/package/microsocks/src/sblist_delete.c
new file mode 100755
index 0000000000..a18209aa55
--- /dev/null
+++ b/package/microsocks/src/sblist_delete.c
@@ -0,0 +1,9 @@
+#include "sblist.h"
+#include <string.h>
+
+void sblist_delete(sblist* l, size_t item) {
+	if (l->count && item < l->count) {
+		memmove(sblist_item_from_index(l, item), sblist_item_from_index(l, item + 1), (sblist_getsize(l) - (item + 1)) * l->itemsize);
+		l->count--;
+	}
+}
diff --git a/package/microsocks/src/sblock.c b/package/microsocks/src/sblock.c
new file mode 100755
index 0000000000..bc387528c5
--- /dev/null
+++ b/package/microsocks/src/sblock.c
@@ -0,0 +1,97 @@
+#include <stdlib.h>
+#include <string.h>
+#include "sblock.h"
+
+#define sblock_log2(x)	(31 - __builtin_clz(x))
+
+#define sblock_block(blocks, blocksize, offset)	((sKey *)((uint8_t *)(blocks) + sizeof(*blocks) + (blocksize) * (offset)))
+
+static void sblock_sizeup(sBlock *block) {
+	sBlocks *blocks;
+	sKey size;
+	uint32_t shift;
+	// blocks满了
+	// 在最大容量之后新建blocks
+	if (block->size >= block->capacity
+		&& !block->blocks[shift = sblock_log2(block->capacity += (size = block->capacity + 1))]
+		&& (blocks = malloc(sizeof(*blocks) + block->blocksize * size))) {
+		block->blocks[shift] = blocks;
+		blocks->size = 0;
+		blocks->key = size;
+		uint32_t i;
+		for (i = 1; i < size; ++i) {
+			*sblock_block(blocks, block->blocksize, i - 1) = size + i;
+		}
+		*sblock_block(blocks, block->blocksize, i - 1) = 0;
+	}
+}
+
+static void sblock_sizedown(sBlock *block) {
+	sBlocks *blocks;
+	uint32_t shift;
+	// 前一个blocks空了
+	// 在最大容量之后回收blocks
+	if (block->size <= block->capacity / 4) {
+		if ((blocks = block->blocks[shift = sblock_log2(block->capacity)])
+			&& blocks->size <= 0) {
+			free(blocks);
+			block->blocks[shift] = 0;
+		}
+		block->capacity /= 2;
+	}
+}
+
+void *sblock_alloc(sBlock *block) {
+	sBlocks *blocks;
+	sKey key;
+	uint32_t shift;
+	// lock
+	sblock_sizeup(block);
+	for (shift = 0; block->capacity & (1 << shift); ++shift) {
+		if ((blocks = block->blocks[shift]) && (key = blocks->key)) {	// key存在
+			sKey *addr = sblock_block(blocks, block->blocksize, key - (1 << shift));
+			blocks->key = *addr;
+			*addr = key;
+			++blocks->size;
+			++block->size;
+			// unlock
+			return addr + 1;
+		}
+	}
+	// unlock
+	return 0;
+}
+
+void *sblock_free(sBlock *block, void *addr) {
+	sBlocks *blocks;
+	sKey key;
+	uint32_t shift;
+	// lock
+	if (addr && (key = *((sKey *)addr - 1)) && (blocks = block->blocks[shift = sblock_log2(key)])
+		&& sblock_block(blocks, block->blocksize, key - (1 << shift)) == ((sKey *)addr - 1)) {	// key不存在
+		--block->size;
+		if (--blocks->size <= 0 && key > block->capacity) {	// 在最大容量之后才回收blocks
+			free(blocks);
+			block->blocks[shift] = 0;
+		} else {
+			*((sKey *)addr - 1) = blocks->key;
+			blocks->key = key;
+		}
+		sblock_sizedown(block);
+		// unlock
+		return 0;
+	}
+	// unlock
+	return addr;
+}
+
+void sblock_init(sBlock *block, size_t blocksize) {
+	block->capacity = 0;
+	block->size = 0;
+	block->blocksize = sizeof(sKey) + blocksize;
+	memset(block->blocks, 0, sizeof(block->blocks));
+}
+
+size_t sblock_size(sBlock *block) {
+	return block->size;
+}
diff --git a/package/microsocks/src/sblock.h b/package/microsocks/src/sblock.h
new file mode 100755
index 0000000000..d6a224445c
--- /dev/null
+++ b/package/microsocks/src/sblock.h
@@ -0,0 +1,38 @@
+#ifndef SBLOCK_H
+#define SBLOCK_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stdint.h>
+#include <stddef.h>
+
+typedef uint32_t sKey;
+
+typedef struct {
+	sKey key;
+	size_t size;
+} sBlocks;
+
+typedef struct {
+	sKey capacity;
+	size_t size;
+	size_t blocksize;
+	sBlocks *blocks[sizeof(sKey) * 8];
+} sBlock;
+
+//for static style
+void sblock_init(sBlock *block, size_t blocksize);
+size_t sblock_size(sBlock *block);
+
+void *sblock_alloc(sBlock *block);
+void *sblock_free(sBlock *block, void *addr);
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma RcB2 DEP "sblock.c"
+
+#endif
diff --git a/package/microsocks/src/sockssrv.c b/package/microsocks/src/sockssrv.c
new file mode 100755
index 0000000000..f8c6f821b9
--- /dev/null
+++ b/package/microsocks/src/sockssrv.c
@@ -0,0 +1,649 @@
+/*
+   MicroSocks - multithreaded, small, efficient SOCKS5 server.
+
+   Copyright (C) 2017 rofl0r.
+
+   This is the successor of "rocksocks5", and it was written with
+   different goals in mind:
+
+   - prefer usage of standard libc functions over homegrown ones
+   - no artificial limits
+   - do not aim for minimal binary size, but for minimal source code size,
+     and maximal readability, reusability, and extensibility.
+
+   as a result of that, ipv4, dns, and ipv6 is supported out of the box
+   and can use the same code, while rocksocks5 has several compile time
+   defines to bring down the size of the resulting binary to extreme values
+   like 10 KB static linked when only ipv4 support is enabled.
+
+   still, if optimized for size, *this* program when static linked against musl
+   libc is not even 50 KB. that's easily usable even on the cheapest routers.
+
+*/
+
+#define _GNU_SOURCE
+#include <unistd.h>
+#define _POSIX_C_SOURCE 200809L
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <signal.h>
+#include <pthread.h>
+#include <netdb.h>
+#include <arpa/inet.h>
+#include <sys/epoll.h>
+#include <errno.h>
+#include <limits.h>
+#include "sblock.h"
+#include "sblist.h"
+
+#define MAX_EVENTS 128
+#define THREAD_BUFFER_SIZE 1460
+
+#ifndef MAX
+#define MAX(x, y) ((x) > (y) ? (x) : (y))
+#endif
+
+#ifndef MIN
+#define MIN(x, y) ((x) < (y) ? (x) : (y))
+#endif
+
+#ifdef PTHREAD_STACK_MIN
+#define THREAD_STACK_SIZE MAX(32*1024, PTHREAD_STACK_MIN)
+#else
+#define THREAD_STACK_SIZE 64*1024
+#endif
+
+#if defined(__APPLE__)
+#undef THREAD_STACK_SIZE
+#define THREAD_STACK_SIZE 64*1024
+#elif defined(__GLIBC__) || defined(__FreeBSD__)
+#undef THREAD_STACK_SIZE
+#define THREAD_STACK_SIZE 32*1024
+#endif
+
+enum socksstate {
+	SS_1_CONNECTED = -4,
+	SS_2_NEED_AUTH = -3, /* skipped if NO_AUTH method supported */
+	SS_3_AUTHED = -2,
+	SS_4_ESTABLISHED = -1,
+	// 所有其他值都代表SS_CLOSING
+};
+
+enum addresstype {
+	AT_IPV4 = 1,
+	AT_DNS = 3,
+	AT_IPV6 = 4,
+};
+
+enum authmethod {
+	AM_NO_AUTH = 0,
+	AM_GSSAPI = 1,
+	AM_USERNAME = 2,
+	AM_INVALID = -1,
+};
+
+enum errorcode {
+	EC_SUCCESS = 0,
+	EC_GENERAL_FAILURE = 1,
+	EC_NOT_ALLOWED = 2,
+	EC_NET_UNREACHABLE = 3,
+	EC_HOST_UNREACHABLE = 4,
+	EC_CONN_REFUSED = 5,
+	EC_TTL_EXPIRED = 6,
+	EC_COMMAND_NOT_SUPPORTED = 7,
+	EC_ADDRESSTYPE_NOT_SUPPORTED = 8,
+};
+
+union sockaddr_union {
+	struct sockaddr_in  v4;
+	struct sockaddr_in6 v6;
+};
+
+#define SOCKADDR_UNION_AF(PTR) (PTR)->v4.sin_family
+
+#define SOCKADDR_UNION_LENGTH(PTR) (\
+	(SOCKADDR_UNION_AF(PTR) == AF_INET6) ? sizeof((PTR)->v6) : sizeof((PTR)->v4))
+
+#define SOCKADDR_UNION_ADDRESS(PTR) (\
+	(SOCKADDR_UNION_AF(PTR) == AF_INET6) ? (struct sockaddr *)&(PTR)->v6.sin6_addr : (struct sockaddr *)&(PTR)->v4.sin_addr)
+
+#define SOCKADDR_UNION_PORT(PTR) (\
+	(SOCKADDR_UNION_AF(PTR) == AF_INET6) ? &(PTR)->v6.sin6_port : &(PTR)->v4.sin_port)
+
+struct buffer {
+	size_t count;
+	size_t capacity;
+	uint8_t data[THREAD_BUFFER_SIZE];
+};
+
+struct client {
+	int fd[2];
+	struct buffer *buf[2];
+	volatile int state;
+	pthread_t pt;
+};
+
+static const char *auth_user = 0;
+static const char *auth_pass = 0;
+static sblist *auth_ips = 0;
+static pthread_rwlock_t auth_ips_lock = PTHREAD_RWLOCK_INITIALIZER;
+static union sockaddr_union bind_addr = { .v4.sin_family = AF_UNSPEC, };
+// listen解析TCP地址，AI_PASSIVE置位，0返回通配地址
+static struct addrinfo hints = {
+	.ai_flags = AI_ADDRCONFIG | AI_PASSIVE,
+	.ai_family = AF_UNSPEC,
+	.ai_socktype = SOCK_STREAM,
+	.ai_protocol = 0,
+};
+
+#ifndef CONFIG_LOG
+#define CONFIG_LOG 1
+#endif
+/* we log to stderr because it's not using line buffering, i.e. malloc which would need
+   locking when called from different threads. for the same reason we use dprintf,
+   which writes directly to an fd. */
+#define dolog(...) dprintf(1, __VA_ARGS__)
+#define doerr(...) dprintf(2, __VA_ARGS__)
+
+static int socks5_connect(union sockaddr_union *remote, int ai_socktype) {
+	int ret;
+	if ((ret = socket(SOCKADDR_UNION_AF(remote), ai_socktype | SOCK_NONBLOCK, 0)) < 0
+		|| (SOCKADDR_UNION_AF(&bind_addr) != AF_UNSPEC
+		&& bind(ret, (struct sockaddr *)&bind_addr, SOCKADDR_UNION_LENGTH(&bind_addr)))
+		|| (connect(ret, (struct sockaddr *)remote, SOCKADDR_UNION_LENGTH(remote)) && errno != EINPROGRESS)) {
+		perror("socket/bind/connect");
+		close(ret);
+		switch (errno) {
+			case ETIMEDOUT:
+				return -EC_TTL_EXPIRED;
+			case EPROTOTYPE:
+			case EPROTONOSUPPORT:
+			case EAFNOSUPPORT:
+				return -EC_ADDRESSTYPE_NOT_SUPPORTED;
+			case ECONNREFUSED:
+				return -EC_CONN_REFUSED;
+			case ENETDOWN:
+			case ENETUNREACH:
+				return -EC_NET_UNREACHABLE;
+			case EHOSTUNREACH:
+				return -EC_HOST_UNREACHABLE;
+			case EBADF:
+			default:
+				return -EC_GENERAL_FAILURE;
+		}
+	}
+	return ret;
+}
+
+static int socks5_proxy(union sockaddr_union *client, uint8_t *buf, size_t n) {
+	// 头部固定4字节
+	if (n < 4 || buf[0] != 5 || buf[2] != 0) { return -EC_GENERAL_FAILURE; /* malformed packet */ }
+	if (buf[1] != 1) { return -EC_COMMAND_NOT_SUPPORTED; /* we support only CONNECT method */ }
+
+	int ret = AF_INET;
+	size_t i = 4 + 4;	// 端口
+	union sockaddr_union *remote = (union sockaddr_union *)&buf[32];
+#if CONFIG_LOG
+	inet_ntop(SOCKADDR_UNION_AF(client), SOCKADDR_UNION_ADDRESS(client), (char *)&buf[4+1+255+2], INET6_ADDRSTRLEN);
+#endif
+	switch (buf[3]) {
+		case AT_IPV6: /* ipv6 */
+			ret = AF_INET6;
+			i = 4 + 16;
+			remote->v6.sin6_flowinfo = 0;
+			remote->v6.sin6_scope_id = 0;
+			/* fall through */
+		case AT_IPV4: /* ipv4 */
+			if (i + 2 > n) { return -EC_GENERAL_FAILURE; }	// IPV6最大长度为4+16+2
+
+			memset(remote->v4.sin_zero, 0, sizeof(remote->v4.sin_zero));
+			memcpy(SOCKADDR_UNION_ADDRESS(remote), &buf[4], i - 4);
+			*SOCKADDR_UNION_PORT(remote) = *(uint16_t *)&buf[i];
+			SOCKADDR_UNION_AF(remote) = ret;
+		#if CONFIG_LOG
+			inet_ntop(SOCKADDR_UNION_AF(remote), SOCKADDR_UNION_ADDRESS(remote), (char *)&buf[64], INET6_ADDRSTRLEN);
+			dolog("client %s: connecting to %s:%d\n", (char *)&buf[4+1+255+2], (char *)&buf[64], ntohs(*SOCKADDR_UNION_PORT(remote)));
+		#endif
+			return socks5_connect(remote, SOCK_STREAM);
+		case AT_DNS: /* dns name */
+			i = 4 + 1 + buf[4];
+			if (i + 2 > n) { return -EC_GENERAL_FAILURE; }	// DNS最大长度为4+1+255+2
+
+			uint16_t port = *(uint16_t *)&buf[i];
+			*(uint16_t *)&buf[i] = 0;	// 设置host结束符
+		#if CONFIG_LOG
+			dolog("client %s: connecting to %s:%d\n", (char *)&buf[4+1+255+2], (char *)&buf[4+1], ntohs(port));
+		#endif
+			struct addrinfo *p, *addr;
+			if ((ret = getaddrinfo((char *)&buf[4+1], 0, &hints, &addr)) || !addr) {
+				doerr("proxy_resolve: %s\n", gai_strerror(ret));
+				/* there's no suitable errorcode in rfc1928 for dns lookup failure */
+				ret = -EC_GENERAL_FAILURE;
+			} else {
+				for (p = addr; p; p = p->ai_next) {
+					remote = (union sockaddr_union *)p->ai_addr;
+					*SOCKADDR_UNION_PORT(remote) = port;
+				#if CONFIG_LOG
+					inet_ntop(SOCKADDR_UNION_AF(remote), SOCKADDR_UNION_ADDRESS(remote), (char *)&buf[4+1+255+2], INET6_ADDRSTRLEN);
+					dolog("remote %s: resolved by %s:%d\n", (char *)&buf[4+1+255+2], (char *)&buf[4+1], ntohs(*SOCKADDR_UNION_PORT(remote)));
+				#endif
+					if ((ret = socks5_connect(remote, SOCK_STREAM)) >= 0) {
+						break;
+					}
+				}
+				freeaddrinfo(addr);
+			}
+			*(uint16_t *)&buf[i] = port;	// 恢复原始数据
+			return ret;
+		default:
+			return -EC_ADDRESSTYPE_NOT_SUPPORTED;
+	}
+}
+
+static int is_authed(union sockaddr_union *client, union sockaddr_union *authed) {
+	if (SOCKADDR_UNION_AF(client) != SOCKADDR_UNION_AF(authed)
+		|| memcmp(client, authed, SOCKADDR_UNION_LENGTH(authed))) {
+		return 0;
+	}
+	return 1;
+}
+
+static int is_in_authed_list(union sockaddr_union *client) {
+	size_t i;
+	for (i = sblist_getsize(auth_ips); i-- > 0;) {
+		if (is_authed(client, sblist_get(auth_ips, i))) { return 1; }
+	}
+	return 0;
+}
+
+static void add_auth_ip(union sockaddr_union *client) {
+	sblist_add(auth_ips, client);
+}
+
+static enum authmethod check_auth_method(union sockaddr_union *client, uint8_t *buf, size_t n) {
+	// 头部固定2字节
+	if (n < 2 || buf[0] != 5) { return AM_INVALID; }
+	for (n = MIN(n, buf[1] + 2); n-- > 2;) {
+		switch (buf[n]) {
+			case AM_NO_AUTH:
+				if (!auth_user) { return AM_NO_AUTH; }
+				else if (auth_ips && !pthread_rwlock_rdlock(&auth_ips_lock)) {
+					int authed = is_in_authed_list(client);
+					pthread_rwlock_unlock(&auth_ips_lock);
+					if (authed) { return AM_NO_AUTH; }
+				}
+				break;
+			case AM_USERNAME:
+				if (auth_user) { return AM_USERNAME; }
+				break;
+			default:
+				break;
+		}
+	}
+	return AM_INVALID;
+}
+
+static enum errorcode check_credentials(uint8_t *buf, size_t n) {
+	// 至少2个字节
+	if (n < 2 || buf[0] != 1) { return EC_GENERAL_FAILURE; }
+	uint8_t ulen, plen;
+	if (n < 2 + (ulen = buf[1]) + 1
+		|| n < 2 + ulen + 1 + (plen = buf[2+ulen])) { return EC_GENERAL_FAILURE; }	// 最大长度为2+255+1+255(+1)
+	buf[2+ulen] = 0;	// 原始user结束符
+	buf[2+ulen+1+plen] = 0;	// 原始pass结束符
+	if (strcmp((char *)&buf[2], auth_user) || strcmp((char *)&buf[2+ulen+1], auth_pass)) { return EC_NOT_ALLOWED; }
+	return EC_SUCCESS;
+}
+
+static void send_auth_response(int fd, uint8_t *buf, enum errorcode code) {
+	buf[1] = code;
+	send(fd, buf, 2, MSG_WAITALL);
+}
+
+static void send_code(int fd, uint8_t *buf, enum errorcode code) {
+	/* position 4 contains ATYP, the address type, which is the same as used in the connect
+	   request. we're lazy and return always IPV4 address type in errors. */
+	buf[1] = code; buf[3] = AT_IPV4; /*AT_IPV4*/
+	send(fd, buf, 4 + 4 + 2, MSG_WAITALL);
+}
+
+static void *socks5_handle(void *data) {
+	struct client *client = data;
+	struct epoll_event ev = {
+		.events = EPOLLET | EPOLLOUT | EPOLLIN,
+		.data.ptr = (unsigned long)client | 1UL,
+	};	// 置1后在main_loop中变更状态
+	union sockaddr_union addr;
+	int ret = sizeof(addr), fd = client->fd[0], epoll_fd = client->fd[1];
+	if (getpeername(fd, (struct sockaddr *)&addr, (socklen_t *)&ret)) { goto breakloop; }
+
+	uint8_t buf[2+255+1+255+1];
+	for (; (ret = recv(fd, buf, sizeof(buf), 0)) > 0;) {
+		switch (client->state) {
+			case SS_1_CONNECTED:
+				ret = check_auth_method(&addr, buf, ret);
+				send_auth_response(fd, buf, ret);
+				if (ret == AM_USERNAME) { client->state = SS_2_NEED_AUTH; }
+				else if (ret == AM_NO_AUTH) { client->state = SS_3_AUTHED; }
+				else { goto breakloop; }
+				break;
+			case SS_2_NEED_AUTH:
+				ret = check_credentials(buf, ret);
+				send_auth_response(fd, buf, ret);
+				if (ret == EC_SUCCESS) {
+					client->state = SS_3_AUTHED;
+					if (auth_ips && !pthread_rwlock_wrlock(&auth_ips_lock)) {
+						if (!is_in_authed_list(&addr)) { add_auth_ip(&addr); }
+						pthread_rwlock_unlock(&auth_ips_lock);
+					}
+				} else { goto breakloop; }
+				break;
+			case SS_3_AUTHED:
+				ret = socks5_proxy(&addr, buf, ret);
+				if (ret < 0) {
+				#if CONFIG_LOG
+					dolog("socks5_proxy ret: %d\n", ret);
+				#endif
+					send_code(fd, buf, -ret);
+				} else {
+					send_code(fd, buf, EC_SUCCESS);
+					client->fd[1] = ret;
+					if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, ret, &ev)) {
+						perror("epoll_add1");
+						// 必须main_loop中清理资源
+					} else { return 0; }
+					close(ret);
+				}
+				/* fall through */
+			default:
+				goto breakloop;
+		}
+	}
+breakloop:
+	client->fd[1] = -1;
+	epoll_ctl(epoll_fd, EPOLL_CTL_MOD, fd, &ev);
+	return (void *)-1;
+}
+
+static int server_listen(struct addrinfo *addr) {
+	int ret = -1, reuse = 1;
+	struct addrinfo *p;
+	for (p = addr; p; p = p->ai_next) {
+		// 非阻塞
+		if ((ret = socket(p->ai_family, p->ai_socktype | SOCK_NONBLOCK, p->ai_protocol)) < 0
+			|| setsockopt(ret, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse))
+			|| bind(ret, p->ai_addr, p->ai_addrlen) || listen(ret, SOMAXCONN)) {
+			close(ret);
+			ret = -1;
+		} else { break; }
+	}
+	freeaddrinfo(addr);
+	return ret;
+}
+
+/* prevent username and password from showing up in top. */
+static void fill_zero(char *s) {
+	size_t i;
+	for (i = 0; s[i]; ++i) s[i] = 0;
+}
+
+static void usage(void) {
+	doerr(
+		"MicroSocks SOCKS5 Server\n"
+		"------------------------\n"
+		"usage: microsocks -b bindaddr -i listenip -p port -u user -P password -1\n"
+		"all arguments are optional.\n"
+		"by default listenip is 0.0.0.0 and port 1080.\n\n"
+		"option -b specifies which ip outgoing connections are bound to\n"
+		"option -1 activates auth_once mode: once a specific ip address\n"
+		"authed successfully with user/pass, it is added to a whitelist\n"
+		"and may use the proxy without auth.\n"
+		"this is handy for programs like firefox that don't support\n"
+		"user/pass auth. for it to work you'd basically make one connection\n"
+		"with another program that supports it, and then you can use firefox too.\n"
+	);
+}
+
+static struct addrinfo *param_resolve(int argc, char *argv[]) {
+	struct addrinfo *addr;
+	const char *listen_ip = 0;
+	const char *listen_port = "1080";
+	// 解析参数
+	int ret;
+	for (; (ret = getopt(argc, argv, ":b:i:p:u:P:1")) >= 0; ) {
+		switch (ret) {
+			case 'b':
+				if ((ret = getaddrinfo(optarg, 0, &hints, &addr)) || !addr) {
+					doerr("bind_resolve: %s\n", gai_strerror(ret));
+					return 0;
+				} else {
+					memcpy(&bind_addr, addr->ai_addr, addr->ai_addrlen);
+					freeaddrinfo(addr);
+				}
+				break;
+			case 'i':
+				listen_ip = optarg;
+				break;
+			case 'p':
+				listen_port = optarg;
+				break;
+			case 'u':
+				auth_user = strdup(optarg);
+				fill_zero(optarg);
+				break;
+			case 'P':
+				auth_pass = strdup(optarg);
+				fill_zero(optarg);
+				break;
+			case '1':
+				auth_ips = sblist_new(sizeof(union sockaddr_union), 8);
+				break;
+			case ':':
+				doerr("error: option -%c requires an operand\n", optopt);
+				/* fall through */
+			case '?':
+			default:
+				usage();
+				return 0;
+		}
+	}
+	if (!auth_user ^ !auth_pass) {
+		doerr("error: user and pass must be used together\n");
+		return 0;
+	}
+	if (auth_ips && !auth_user) {
+		doerr("error: auth-once option must be used together with user/pass\n");
+		return 0;
+	}
+	if ((ret = getaddrinfo(listen_ip, listen_port, &hints, &addr)) || !addr) {
+		doerr("listen_resolve: %s\n", gai_strerror(ret));
+		return 0;
+	}
+	return addr;
+}
+
+static int client_handle(struct client *client, uint8_t instance, sBlock *buffers) {
+	size_t i;
+	ssize_t n, t;
+	struct buffer *buffer;
+	if ((buffer = client->buf[instance])) {
+		// 仍有数据待发送
+		i = buffer->count;
+		n = buffer->capacity;
+		for (; i < n; i += t) {
+			if ((t = send(client->fd[!instance], &buffer->data[i], n - i, MSG_DONTWAIT)) > 0) {}
+			else if (t < 0 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
+				buffer->count = i;
+				return 0;
+			} else { return -1; }
+		}
+		if ((client->buf[instance] = sblock_free(buffers, client->buf[instance]))) {
+			doerr("client_handle/free failed.\n");
+		}
+	}
+	uint8_t buf[THREAD_BUFFER_SIZE];
+	for (; (n = recv(client->fd[instance], buf, sizeof(buf), MSG_DONTWAIT)) > 0;) {
+		for (i = 0; i < n; i += t) {
+			if ((t = send(client->fd[!instance], &buf[i], n - i, MSG_DONTWAIT)) > 0) {}
+			else if (t < 0 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
+				// 数据未发完
+				if (!(buffer = sblock_alloc(buffers))) {
+					doerr("client_handle/alloc failed. OOM?\n");
+					return -1;
+				}
+				client->buf[instance] = buffer;
+				buffer->count = 0;
+				buffer->capacity = n - i;
+				memcpy(buffer->data, &buf[i], n - i);
+				return 0;
+			} else { return -1; }
+		}
+	}
+	if (n < 0 && (errno == EAGAIN || errno == EWOULDBLOCK)) { return 0; }
+	else { return -1; }	// 需要关闭
+}
+
+static int server_handle(struct client *server, sBlock *clients) {
+	int fd, epoll_fd = server->fd[1];
+	struct client *client;
+	for (; (fd = accept4(server->fd[0], 0, 0, 0)) >= 0
+		&& (client = sblock_alloc(clients));) {
+		client->fd[0] = fd;
+		client->fd[1] = epoll_fd;
+		client->buf[0] = 0;
+		client->buf[1] = 0;
+		client->state = SS_1_CONNECTED;
+		struct epoll_event ev = {
+			.events = EPOLLET | EPOLLOUT | EPOLLIN,
+			.data.ptr = (unsigned long)client | 0UL,
+		};
+		if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &ev)) {
+			perror("epoll_add0");
+			goto oom;
+		}
+
+		pthread_attr_t attr;
+		if (pthread_attr_init(&attr)) {
+			doerr("pthread_attr_init failed. OOM?\n");
+			goto oom;
+		} else {
+			if (pthread_attr_setstacksize(&attr, THREAD_STACK_SIZE)
+				|| pthread_create(&client->pt, &attr, socks5_handle, client)) {
+				doerr("pthread_setstacksize/create failed. OOM?\n");
+				pthread_attr_destroy(&attr);
+			oom:
+				sblock_free(clients, client);
+				break;
+			}
+			pthread_attr_destroy(&attr);
+		}
+	}
+	// 可能还有连接，ET模式忽略accept事件
+	if (fd >= 0) {
+		doerr("connection rejected. OOM?\n");
+		close(fd);
+		// XXX: 重新设置errno
+		//errno = ENOMEM;
+		return 0;
+	} else if (errno == EAGAIN || errno == EWOULDBLOCK
+		|| errno == ECONNABORTED || errno == EPROTO) {
+		return 0;
+	}
+	return -1;
+}
+
+int main(int argc, char *argv[]) {
+	// 对端shutdown后，避免调用write进程退出
+	int ret, epoll_fd;
+	if (signal(SIGPIPE, SIG_IGN) == SIG_ERR
+		|| (epoll_fd = epoll_create(MAX_EVENTS)) < 0) {
+		perror("signal/epoll_create");
+		return -1;
+	}
+
+	sBlock buffers, clients;
+	sblock_init(&buffers, sizeof(struct buffer));
+	sblock_init(&clients, sizeof(struct client));
+	struct client *client, *server;
+	if (!(server = sblock_alloc(&clients))) {
+		doerr("main_loop/alloc failed. OOM?\n");
+		close(epoll_fd);
+		return -2;
+	}
+
+	server->fd[1] = epoll_fd;
+	server->state = SS_4_ESTABLISHED;
+	struct epoll_event events[MAX_EVENTS], ev = {
+		.events = EPOLLET | EPOLLIN,
+		.data.ptr = (unsigned long)server | 0UL,
+	};
+	if ((server->fd[0] = server_listen(param_resolve(argc, argv))) < 0
+		|| epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server->fd[0], &ev)) {
+		perror("server_listen/epoll_add");
+		goto exit;
+	}
+
+	// connect时的resolve配置
+	hints.ai_flags = AI_ADDRCONFIG;
+	hints.ai_family = SOCKADDR_UNION_AF(&bind_addr);
+	for (; (ret = epoll_wait(epoll_fd, events, MAX_EVENTS, -1)) > 0;) {
+		unsigned int i;
+		for (i = 0; i < ret; ++i) {
+			uint8_t instance = (unsigned long)events[i].data.ptr & 1UL;
+			client = (unsigned long)events[i].data.ptr & ~1UL;
+			// 出现错误，由读写回调来处理错误
+			if ((events[i].events & (EPOLLHUP | EPOLLERR))) {
+				events[i].events |= EPOLLOUT | EPOLLIN;
+			}
+			switch (client->state) {
+				case SS_1_CONNECTED:
+				case SS_2_NEED_AUTH:
+				case SS_3_AUTHED:
+					if (!(instance && (events[i].events & EPOLLOUT))) { break; }
+					// instance=1且事件EPOLLOUT触发表示进入建立状态
+					client->state = SS_4_ESTABLISHED;
+					pthread_join(client->pt, 0);
+					// XXX: 从client中获取对应的server，重新触发accept事件
+					epoll_ctl(server->fd[1], EPOLL_CTL_MOD, server->fd[0], &ev);
+					/* fall through */
+				case SS_4_ESTABLISHED:
+					if (client->fd[1] == epoll_fd) {
+						// 服务端
+						if (((events[i].events & EPOLLIN) && server_handle(client, &clients))) {
+							// 需要关闭
+							client->state = i;
+							// epoll_fd不用关闭
+							close(client->fd[0]);
+						}
+					} else {
+						// 客户端
+						// 按位或运算
+						if (((events[i].events & EPOLLIN) && client_handle(client, instance, &buffers))
+							| ((events[i].events & EPOLLOUT) && client_handle(client, !instance, &buffers))) {
+							client->state = i;
+							sblock_free(&buffers, client->buf[1]);
+							sblock_free(&buffers, client->buf[0]);
+							close(client->fd[1]);
+							close(client->fd[0]);
+						}
+					}
+					break;
+				default:
+					// 所有其他值都代表SS_CLOSING
+					client->state = i;	// 更新最后引用
+					break;
+			}
+		}
+		for (i = 0; i < ret; ++i) {
+			client = (unsigned long)events[i].data.ptr & ~1UL;
+			// 无符号比较，在最后引用时执行清理
+			if (client->state <= i) { sblock_free(&clients, client); }
+		}
+	}
+	perror("epoll_pwait");
+exit:
+	close(server->fd[0]);
+	close(epoll_fd);
+	return 0;
+}
